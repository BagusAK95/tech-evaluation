import TransactionService from '../services/transaction.js';
import { validationResult, query, body } from 'express-validator';

export default class TransactionController {
  constructor() {
    this.service = new TransactionService();
  }

  /**
   * GET /api/transactions
   * ---------------------
   * Retrieve a list of all transactions.
   *
   * Optional Query Parameters:
   * - type: Filter transactions by type. Valid values are "Stake", "Borrow", or "Lend".
   *
   * Success Response:
   * - 200 OK: Returns an array of transactions (filtered if query param is used).
   *
   * Error Response:
   * - 400 Bad Request: Returned if an invalid type value is provided.
   */
  async index(req, res) {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    try {
      const { type } = req.query;
      const transactions = await this.service.getAll(type);

      return res.status(200).json(transactions);
    } catch (error) {
      return res.status(error.statusCode).json({ message: error.message });
    }
  }

  /**
   * GET /api/transactions/:id
   * -------------------------
   * Retrieve a specific transaction by its ID.
   *
   * URL Parameters:
   * - id: The unique identifier of the transaction to retrieve.
   *
   * Success Response:
   * - 200 OK: Returns the transaction object.
   *
   * Error Response:
   * - 404 Not Found: Returned if no transaction exists with the given ID.
   */
  async fetchById(req, res) {
    try {
      const { id } = req.params;      
      const transaction = await this.service.getByID(id);

      return res.status(200).json(transaction);
    } catch (error) {
      return res.status(error.statusCode).json({ message: error.message });
    }
  }

  /**
   * POST /api/transactions
   * ----------------------
   * Create a new transaction.
   *
   * Request Body:
   * - transactionType (string): Must be one of "Stake", "Borrow", or "Lend".
   * - token (string): Must be a non-empty string.
   * - amount (number): Must be a positive number.
   * - Note: The 'id' is generated by the backend and should not be included in the request.
   *
   * Success Response:
   * - 201 Created: Returns the newly created transaction object.
   *
   * Error Response:
   * - 400 Bad Request: Returned if validation fails (e.g., invalid type, empty token, or non-positive amount).
   */
  async create(req, res) {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    try {
      const { transactionType, token, amount } = req.body;
      const transaction = await this.service.create({
        transactionType,
        token,
        amount
      });

      return res.status(201).json(transaction);
    } catch (error) {
      return res.status(error.statusCode).json({ message: error.message });
    }
  }

  /**
   * PUT /api/transactions/:id
   * -------------------------
   * Update an existing transaction.
   *
   * URL Parameters:
   * - id: The unique identifier of the transaction to update.
   *
   * Request Body:
   * - status: New status of the transaction
   * - description: Optional new description
   *
   * Success Response:
   * - 200 OK: Returns the updated transaction object.
   *
   * Error Response:
   * - 404 Not Found: Returned if no transaction exists with the given ID.
   * - 400 Bad Request: Returned if invalid status is provided or transaction type is attempted to be changed.
   */
  async update(req, res) {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const { id } = req.params;
      const { status, description } = req.body;
      const result = await this.service.update(id, { status, description });

      return res.status(200).json(result);
    } catch (error) {
      return res.status(error.statusCode).json({ message: error.message });
    }
  }

  /**
   * DELETE /api/transactions/:id
   * ----------------------------
   * Delete a transaction.
   *
   * URL Parameters:
   * - id: The unique identifier of the transaction to delete.
   *
   * Success Response:
   * - 200 OK: Returns a message indicating successful deletion.
   *
   * Error Response:
   * - 404 Not Found: Returned if no transaction exists with the given ID.
   * - 400 Bad Request: Returned if transaction cannot be deleted (e.g., completed transactions).
   */
  async delete(req, res) {
    try {
      const { id } = req.params;
      const result = await this.service.delete(id);

      return res.status(200).json(result);
    } catch (error) {
      return res.status(error.statusCode).json({ message: error.message });
    }
  }
}
